Greenplum 튜닝시 고려 사항

1. 시스템 리소스 튜닝 고려 사항
  1) Disk IO 줄이기
     - 압축 
     - 파티션  
     - 인덱스
       * 불필요한 Index 삭제
       * data 적재시 order by 해서 적재  => Disk IO를 줄여주지만, Insert 시 부하 발생. order by 컬럼은 인덱스 컬럼 위주로..
     - 컬럼베이스 저장       => 많은 컬럼을 조회하는 경우 쿼리 성능이 저하 될 수 있음.
     - Block Size        
     - Array Type 적용

  2) Network IO 줄이기
     - 분산키 조정
     - broadcast 모션 줄이기 => 테이블 anlyze 수행이 필요 함.

  3) CPU 줄이기
     - Hash => Nestloop(단, Index가 필요 함) 

2. 쿼리 플랜 
  1) 쿼리 작성 시 유의 사항
     - 쿼리 사용 패턴
       => where id Not In (select id) => Left outer join 으로 변환
          (select xxx) 서브쿼리에서 나올 경우, Broadcast 발생하여, 반환되는 건수가 많을 경우, 속도 지연 됨.
       => 조인시 분산키 컬럼 변환 하지 말 것
          분산키를 함수 등으로 조작을 할 경우, 무조건 재분산이 일어 남.
          where substr(a.분산키, 1, 6) = substr(b.분산키, 1, 6) 

       => 파티션키 컬럼 변경하지 말 것
          파티션키를 함수 등으로 조작을 할 경우, 파티션 스캔이 지원 안됨.
          where substr(a.파티션키, 1, 6) = '202204' =>  where a.파티션키 >= '20220401' and a.파티션키 < '20220501'

       => 파티션 테이블 조회시 파티션 키 조건 추가
          GPORCA옵티마이져의 경우에는 Dynamic Partition Elimination 수행되지만, Legacy 옵티마이저에서는 파티션 스캔 조건이 있어야지만 파티션 스캔 사용
          옵티마이져 종류와 상관없이 무조건 파티션 스캔을 위해서는 파티션 스캔 조건을 강제로 넣어주는 것을 권고

     - 쿼리가 복잡한 경우(slice가 높은 경우) 임시 테이블 활용
       => 슬라이스가 많은 경우, 쿼리 플랜이 복잡고 원하지 않는 쿼리 플랜으로 들어갈 수 있기 때문
          slice가 10 ~ 15이상으로 높을 경우 임시 테이블 사용, 다음번 조인을 위하여 분산키 일치
          쿼리 플랜을 보면 slice가 나오는데, 이 슬라이스는 각 세그먼트 인스턴스끼리 통신 함.
          Temp 테이블 만들때 Disk Write 작업이 수행이 되나, 
          어차피 내부적으로 할당된 메모리 보다 커질 경우 임시 공간(spill out)을 활용하기 때문에 
          그 때에도 Disk Write 작업이 필요 함.
       => 임시 테이블 생성시 하위 쿼리의 조인절에 맞도록 분산키를 적용
          재분산,  브로드 케스트는 어떨수 없지만, 최초 조인이 발생되는 케이스에서만이라도 줄이는 것을 권고

     - 여러개의 쿼리가 순차적으로 수행될 때 데이터 사이즈를 미리 줄여 놓고, 하위 쿼리가 수행되도록 작성
       => 상위 쿼리에서 임시 테이블을 만들 때 하위 쿼리의 조건으로 데이터 사이즈를 줄일 수 있을 경우, 미리 조인하여 사이즈를 줄임
          임시테이블을 활용해서 쿼리 수행하는 경우, 데이터 사이즈를 줄일 수 있는 조건을 상단에서 먼저 필터링을 하여 테이블 생성
          (임시 테이블 사이즈를 줄일 수 있음.)
       => 테이블 A, B 조인시, 서브 쿼리에서 미리 Group by 해서 row 수를 줄인 다음 조인 수행
       => TEMP 테이블 생성시 * 대신 필요한 컬럼만 사용

  2) 쿼리 플래너 적용 규칙
     - Legacy planner, set optimizer=off;
       => Short 쿼리 및 최적화된 쿼리 
       => 인덱스를 많이 사용할 때
       => Left Outer / Full Joins 조인이 많을 경우
       => Rollups/Cubes 사용시
     => text columns에 많은 비교가 발생하는 경우

     - GPORCA planner, set optimizer=on; 
       => Correlated Queries 사용시
       => WITH 절 쿼리, Legacy보다는 성능 개선 되지만 슬라이스 수가 많으면 Temp 테이블 활용
       => Dynamic Partition Elimination, 파티션 테이블에 파티션 키를 상수로 조건을 걸지 않더라도 드라이빙 테이블에서 값을 읽어서 파티션 스캔 가능
       => 파티션 테이블에 다른 테이블로 join 업데이트시 메모리 또는 리소스를 많이 사용하는 경우 권고       
       => 분산키, 파티션키를 업데이트 하는 경우
       => Legacy 쿼리 수행시 out of memory가 발생되는 경우

     - 쿼리 플래너 적용시 고려 사항
       => 인덱스를 많이 활용하는 경우에는 가급적이면 legacy planner를 활용(Default 로 사용)
       => legacy planner를 적용했는데도 시간이 단축되지 않을 경우 한해서 ORCA 옵티마이저 활용

  3) 쿼리 튜닝 파라미터
     ## 일반 적인 쿼리 튜닝
     - set random_page_cost=100; 100 => 1, 0;  => 인덱스를 가급적 많이 쓰려면, 0~1과 같이 낮은 값
     - set enable_nestloop=off;  off => on     => nest loop를 사용하기 위해서는 on을 해야 함. 기본은 off, random_page_cost와 같이 적용     
     - set optimizer=on, off;                  => 옵티마이저 선택 이것은 아래 쿼리 플래너 적용 규칙 참조
     - set statement_mem = '125MB';     big query 일경우 '2GB' 처럼 높게 short query 일경우 '32MB' 처럼 작게
                                        디스크 IO가 많을 경우, 메모리가 많을 경우에는 1~2GB 정도로 셋팅하고 사용해도 됨.
                                        무조건 값을 올린다고 좋아 지는 것은 아님.
     ## 기타 쿼리 플랜 변경 파라미터
      - enable_bitmapscan                     default: on
      - enable_groupagg                       default: on
      - enable_hashagg                        default: on        ==> 가끔 튜닝시 사용, nestloop 유도하기 위함
      - enable_hashjoin                       default: on
      - enable_indexscan                      default: on 
      - enable_mergejoin                      default: off
      - enable_nestloop                       default: off       ==> 빈번하게 사용
      - enable_seqscan                        default: on
      - enable_sort                           default: on
      - random_page_cost                      default: 100        ==> 빈번하게 사용, 0 or 1으로 적용
      - gp_dynamic_partition_pruning          default: on               
      - gp_enable_agg_distinct                default: on
      - gp_enable_agg_distinct_pruning        default: on
      - gp_enable_direct_dispatch             default: on
      - gp_enable_fast_sri                    default: on 
      - gp_enable_groupext_distinct_gather    default: on
      - gp_enable_groupext_distinct_pruning   default: on
      - gp_enable_predicate_propagation       default: on
      - gp_enable_preunique                   default: on
      - gp_enable_relsize_collection          default: on
      - gp_enable_sort_distinct               default: on
      - gp_enable_sort_limit                  default: on
      - gp_motion_cost_per_row                default: 0
      - gp_segments_for_planner               default: 0        ==> 매우 드물게 사용, Broadcast 유도시 1, 재분산 유도시 100000
      - gp_enable_sort_distinct               default: on
      - gp_enable_multiphase_agg              default: on
      - gp_workfile_compression               default: on       ==> DB 파라미터에 on으로 해서 사용(모두 적용되어 있음) 
      - join_collapse_limit                   default: 20       ==> 아주 드물게 사용, 쿼리 플랜 생성시간이 느릴 경우, 8으로 셋팅

  4) 기타 튜닝
     - json type으로 key/value를 찾을 경우 => hstore 으로 튜닝  
       차이점: json으로는 특정 key를 검색하는 동안, 해당 컬럼의 모든 데이터를 조회를 해야 함.
              hstore는 특정 key로 검색하면 특정 value만 리턴 

3. DB 관리
  1) 카탈로그 테이블 
      - 주기적인 vacuum, analyze 수행 필요 (대부분의 고객사이트에는 심야시 배치로 수행)
  2) User 테이블 
      - analyze 수행, vacuum 수행
  3) 세션 관리
      - 세션이 1000개 이상 발생시 pgbouncer 적용      

4. DB 모델링
  1) 마트성 집계 테이블 활용
      - 쿼리 튜닝해도 아무리 해도 성능 개선이 되지 않을 경우에 집계성 테이블 활용 => 굉장히 유효 함.
  2) 스타 스키마성 마스터성 테이블 
      - 여러개의 마스터 테이블을 하나의 빅 마스터 테이블 활용 => 테이블 조인 수행 횟수를 줄여서 재분산/브로드캐스팅 횟수를 줄여 줌. 
  3) Array 타입 활용
      - 쿼리 패턴이 정해진 경우에 스캔속도를 줄일 수 있음.   => Disk IO 개선

